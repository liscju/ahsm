package attatrol.ahsm;

import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.nio.file.Files;
import java.nio.file.InvalidPathException;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.List;

public class Main {
  /**
   * Messages for preprocessing errors.
   */
  private static final String MSG_WRONG_NUMBER_OF_ARGS = "Wrong number of argument, need 4.";
  private static final String MSG_PATH_PARSING_FAILURE = "Failed to parse input arguments.";
  private static final String MSG_SECURITY_ERROR = "Have no permission to open the file.";
  private static final String MSG_BAD_SITE = "Failed to locate essentual files that belong to the site:";
  private static final String MSG_IDENTICAL_INPUT = "Both input sites are the same";
 

  /**
   * Messages for processing errors.
   */
  private static final String MSG_FILE_NOT_FOUND = "Failed to find file";
  private static final String MSG_FILE_NOT_CREATED = "Failed to create file";

  /**
   * Postprocessing messages.
   */
  private static final String MSG_GENERAL_FAILURE = "Merging failed.";
  private static final String MSG_GENERAL_SUCCESS = "Merging success.";

  /**
   * Help message.
   */
  private static final String MSG_HELP = "This program creates symmetric difference from two maven site reports\n"
      + "generated for checkstyle build.\n"
      + "It has 4 obligatory command line arguments.\n"
      + "First two must be valid paths to the sites generated by maven site plugin.\n"
      + "Third is a location of the product site\n" + "Forth is a project name";

  /**
   * Executes preprocessing checks for cli args.
   * 
   * @param args
   *          , cli arguments.
   */
  public static void main(String... args) {
    if (args.length == 4) {
      try {
        final Path path1 = Paths.get(args[0]).toRealPath();
        final Path path2 = Paths.get(args[1]).toRealPath();
        try {
          Site site1 = Site.create(path1, args[3]);
          Site site2 = Site.create(path2, args[3]);
          if(!Files.isSameFile(path1, path2)) {
            site1.fill();
            site2.fill();
            System.out.println("Wow its done!");
          }
          else {
            invalidInputMessage(MSG_IDENTICAL_INPUT);
          }
        } catch (IllegalArgumentException e) {
          invalidInputMessage(MSG_BAD_SITE + e.getMessage());
        }
      } catch (InvalidPathException | IOException e) {
        invalidInputMessage(MSG_PATH_PARSING_FAILURE);
      } catch (SecurityException e) {
        invalidInputMessage(MSG_SECURITY_ERROR);
      }
    } else {
      invalidInputMessage(MSG_WRONG_NUMBER_OF_ARGS);
    }
  }

  private static void invalidInputMessage(String message) {
    System.out.println(message);
    System.out.println();
    System.out.println(MSG_HELP);
  }
  
  private static void siteReportOutput(List<String> messages) {
    int i = 1;
    for(String msg:messages) {
      System.out.println(i++ + msg);
    }
  }

}
