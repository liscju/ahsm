package attatrol.ahsm;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileWriter;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.NoSuchFileException;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.ArrayList;

import org.jsoup.nodes.Document;

import attatrol.ahsm.site.InitialSiteVerifier;
import attatrol.ahsm.site.SiteContent;
import attatrol.ahsm.site.SiteContentMerger;
import attatrol.ahsm.site.SiteParser;
import attatrol.ahsm.site.XrefCopier;

public class Main {
  /**
   * Messages for preprocessing errors.
   */
  public static final String MSG_WRONG_NUMBER_OF_ARGS = "Not enough command line args, need at least 4.";
  public static final String MSG_BAD_PATH = "Failed to resolve path to site: ";
  public static final String MSG_NOT_EXISTS = "Site directory doesnt exist: ";
  public static final String MSG_BAD_SITE = "Failed to locate essentual files that belong to the site: ";
  public static final String MSG_IDENTICAL_INPUT = "Both input sites have the same path.";
  public static final String MSG_ALTERNATE_TRY = "Failed to copy files from first site, trying with second";
  public static final String MSG_INITIAL_SUCCESS = "Successfull preparation stage.";

  /**
   * Messages for processing errors.
   */
  public static final String MSG_FILE_NOT_FOUND = "Failed to find file";
  public static final String MSG_FILE_NOT_CREATED = "Failed to create file";
  public static final String MSG_CORRUPTED_MAIN_HTML = "Main html listing is broken.";

  /**
   * Postprocessing messages.
   */
  public static final String MSG_GENERAL_FAILURE = "Merging failed.";
  public static final String MSG_GENERAL_SUCCESS = "Merging success.";

  /**
   * Help message.
   */
  public static final String MSG_HELP = "This program creates symmetric difference from two maven site reports\n"
      + "generated for checkstyle build.\n"
      + "It has 4 obligatory command line arguments:\n"
      + "First one is the project name,\n"
      + "two next are the links to sites, already generated by maven-site-plugin,\n"
      + "forth argument is a destination for the difference site, it is facultative.\n"
      + "Any other arguments will be skipped.";

  private static final Path DEFAULT_OUTPUT_PATH = Paths.get("result");

  public static final String MISC_ENCODING = "UTF-8";

  private static String projectName;

  /**
   * Executes preprocessing checks for cli args.
   * 
   * @param args
   *          , cli arguments.
   */
  public static void main(String... args) {
    if (args.length >= 3) {
      Path pathSite1 = null;
      Path pathSite2 = null;
      Path resultPath = null;
      // preparation stage of the process
      try {
        projectName = args[0];
        pathSite1 = Paths.get(args[1]);
        pathSite2 = Paths.get(args[2]);
        InitialSiteVerifier integrityVerifier = new InitialSiteVerifier(projectName);
        if (!Files.isDirectory(pathSite1)) {
          throw new IllegalArgumentException(MSG_NOT_EXISTS + args[1]);
        }
        if (!Files.isDirectory(pathSite2)) {
          throw new IllegalArgumentException(MSG_NOT_EXISTS + args[2]);
        }
        if (pathSite1.equals(pathSite2)) {
          throw new IllegalArgumentException(MSG_IDENTICAL_INPUT);
        }
        if (!integrityVerifier.verifySite(pathSite1)) {
          throw new IllegalArgumentException(MSG_BAD_SITE + args[1]);
        }
        if (!integrityVerifier.verifySite(pathSite2)) {
          throw new IllegalArgumentException(MSG_BAD_SITE + args[2]);
        }
        resultPath = args.length >= 4 ? Paths.get(args[3]) : DEFAULT_OUTPUT_PATH;
        FilesystemUtils.createDirectory(resultPath);
        try {
          integrityVerifier.copyImmutableSiteFiles(pathSite1, resultPath);
        } catch (Exception e) {
          e.printStackTrace();
          System.out.println(MSG_ALTERNATE_TRY);
          FilesystemUtils.createDirectory(resultPath);
          integrityVerifier.copyImmutableSiteFiles(pathSite2, resultPath);
        }
        // here be dragons
        System.out.println(MSG_INITIAL_SUCCESS);
        try {
          //parsing of input
          final Path subject1 = pathSite1.resolve(projectName + ".html");
          final Path subject2 = pathSite2.resolve(projectName + ".html");
          SiteContent content1 = SiteParser.parse(subject1, pathSite1.getName(pathSite1.getNameCount() - 1).toString());
          SiteContent content2 = SiteParser.parse(subject2, pathSite2.getName(pathSite2.getNameCount() - 1).toString());
          //merging
          SiteContent merge = new SiteContentMerger(content1, content2).merge();
          //writing to file
          Path resultSubject = resultPath.resolve(projectName + "_merged.html");
          try {
          FilesystemUtils.delete(resultSubject);
          } catch (NoSuchFileException e) {
            //empty
          }
          Files.createFile(resultSubject);
          final Document resultDoc = SiteParser.generateFromTemplate(subject1, merge);
          try (BufferedWriter bw = new BufferedWriter(new FileWriter(resultSubject.toFile()))) {
            bw.write(resultDoc.outerHtml());
            bw.close();
          } catch (FileNotFoundException ex) {
            System.out.println(ex.toString());
          }
          //xref copying
          XrefCopier.copyXrefFiles(merge.getFileTables(), pathSite1, pathSite2, resultPath);
          System.out.println(MSG_GENERAL_SUCCESS);
        } catch (IOException e) {
          e.printStackTrace();
        }
      } catch (IllegalArgumentException | IOException e) {
        e.printStackTrace();
        System.out.print(MSG_HELP);
      }
    } else {
      System.out.print(MSG_HELP);
    }
  }

}
